# autoload -U promptinit; promptinit
# prompt pure

if [ -f ~/.zsh_plugins.sh ]; then
  source ~/.zsh_plugins.sh
else
  >&2 echo 'Install zsh plugins with: antibody bundle < ~/.vim/others/zsh_plugins.txt > ~/.zsh_plugins.sh'
fi

# Ensure we're in emacs mode
bindkey -e


# Fix home and end
bindkey  "^[[H"   beginning-of-line
bindkey  "^[[F"   end-of-line


# Bash like autocomplete
setopt noautomenu
setopt nomenucomplete

HISTFILE=~/.zsh_history
HISTSIZE=10000000
SAVEHIST=10000000


# https://github.com/mattjj/my-oh-my-zsh/blob/b1d4bab329456e9a4af49237064d9a3b6566f1b0/history.zsh
# setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
# setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.


# Remove CWD dirs from fzf-z
# https://github.com/andrewferrier/fzf-z#sources-of-information
export FZFZ_SUBDIR_LIMIT=0


# https://github.com/tj/n
export N_PREFIX=$HOME/n
export PATH=$N_PREFIX/bin:$PATH

# own crap
export PATH=$HOME/bin:$PATH
export PATH=$HOME/.vim/bin:$PATH

# pip --user
export PATH=$HOME/.local/bin:$PATH

# not in path on macos?
export PATH=/usr/local/bin:$PATH

if [ -f $HOME/.cargo/env ]; then
  source $HOME/.cargo/env
fi

if [ "${EDITOR:-}" = "" ]; then
  if [ -x "$(which nvim)" ]; then
    export EDITOR=nvim
  else
    export EDITOR=vi
  fi
fi

# Not enough contrast in the default colors
zstyle ':prompt:pure:prompt:success' color cyan
zstyle ':prompt:pure:prompt:error' color red

autoload -Uz compinit && compinit

export PATH=/usr/local/bin/:$PATH


alias keyboard-assistant='sudo open /System/Library/CoreServices/KeyboardSetupAssistant.app/Contents/MacOS/KeyboardSetupAssistant'
alias node_modules_to_path='export PATH="$(pwd)/node_modules/.bin":$PATH'
alias find_old_node_modules='find . -name node_modules -type d -maxdepth 2 -mtime +30'
alias cd-git-root='cd "$(git rev-parse --show-toplevel)"'

# https://github.com/tj/n
export N_PREFIX=$HOME/n
export PATH=$N_PREFIX/bin:$PATH

git-add-to-existing() {

  if [ -d .git ]; then
    echo "Already has a git dir"
    return 1
  fi

  git init
  git remote add origin "$1"
  git fetch origin
  git reset origin/master
  git branch --set-upstream-to origin/master
}

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

# Fix Home and End for WSL2
bindkey "^[OH" beginning-of-line
bindkey "^[OF" end-of-line

# fix delete key
bindkey  "^[[3~"  delete-char

# Fix esc dot for WSL2
bindkey '\e.' insert-last-word

repeat_n () {
  local n=$1
  shift

  for i in {1..$n}; do
    $@ || return $?
  done
}


esamattis-fasd-pick-dir() {
  LBUFFER="${LBUFFER}$(fasd -d -l | fzf --keep-right)"
  local ret=$?
  zle reset-prompt
  return $ret
}

# Create directory and cd into it
take() {
  mkdir -p $@ && cd ${@:$#}
}

zle -N esamattis-fasd-pick-dir
bindkey '^G' esamattis-fasd-pick-dir

export FZF_DEFAULT_COMMAND=esamatti-fzf-find
export FZF_CTRL_T_COMMAND=esamatti-fzf-find

# fzf keybindings install:
# $(brew --prefix)/opt/fzf/install
# https://github.com/junegunn/fzf#using-homebrew
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


if [ "$(uname)" != "Darwin" ]; then
  if [ -x "$(which keychain)" ]; then
    eval $(keychain --eval)
  fi
fi

# https://blog.thecodewhisperer.com/permalink/renaming-magically-with-zmv
autoload zmv



ni() {
  # Add packages
  if [ "${1:-}" != "" ]; then
    if [ -f pnpm-lock.yaml ] || [ -f ../../pnpm-lock.yaml ]; then
      pnpm install $@ && pnpm install
    else
      npm install $@
    fi
    return
  fi

  # Prefer installing using the lock file to avoid faker.js like issue.
  # Just call the original command manually when need to update the lock
  if [ -f pnpm-lock.yaml ] || [ -f ../../pnpm-lock.yaml ]; then
    pnpm install --frozen-lockfile
  elif [ -f package-lock.json ] ; then
    npm ci
  else
    npm install
  fi
}
